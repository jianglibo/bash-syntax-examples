{"data":[{"cat":"bash","title":"equal.sh","content":"\n\n# test and compare string, equal and not equal\n# \u003d: equal\n# !\u003d: not equal\n# \u003c: less than\n\nif [[ \u0027a\u0027 \u003d \u0027a\u0027 ]];then\n\techo \"a \u003d a\"\nfi\n\nif [[ \u0027a\u0027 !\u003d \u0027b\u0027 ]];then\n\techo \"a !\u003d b\"\nfi\n\nif [[ \u0027a\u0027 \u003c \u0027b\u0027 ]];then\n\techo \"a \u003c b\"\nfi\n\nif [[ -z \u0027\u0027 ]];then\n\techo \"empty string\"\nfi\n\nif [[ -n \u0027a\u0027 ]];then\n\techo \"not empty string\"\nfi\n\nif [[ 1 -eq 1 ]];then\n\techo \"1 -eq 1\"\nfi\n\nif [[ 1 -ne 2 ]];then\n\techo \"1 -ne 2\"\nfi"},{"cat":"bash","title":"test_files.sh","content":"\n# test file or directory existance.\n# -e: file existance\n# -d: directory existance\n# -f: file existance and is a regular file\n# -L: file existance and is a symbolic link\n# -r: file existance and is readable\n# -w: file existance and is writable\n# -x: file existance and is executable\n# -s: file existance and is not empty\n# -O: file existance and is owned by the current user\n# -G: file existance and is owned by the current group\n# -N: file existance and has been modified since it was last read\n# -nt: file existance and is newer than another file\n# -ot: file existance and is older than another file\n# -ef: file existance and is a hard link to another file\n\n# code example of -nt option\nif [[ file1 -nt file2 ]]; then\n\techo \"file1 is newer than file2\"\nfi\n\nif [[ -e \u0027a\u0027 ]]; then\n\techo \"file exist\"\nelse\n\techo \"file not exist\"\nfi\n\n# if need use sudo to test existance of a file\nif sudo test -e \u0027a\u0027; then\n\techo \"file exist\"\nelse\n\techo \"file not exist\"\nfi\n\n# if need use sudo to compare the newest of two files\nif sudo test file1 -nt file2; then\n\techo \"file1 is newer than file2\"\nfi\n"},{"cat":"bash","title":"multiplelines.sh","content":"# assign multiple lines string to a variable and interpolate the variables in the multiple lines\n\n# 1. use cat \u003c\u003c EOF\n# 2. use cat \u003c\u003c \"EOF\"\n# 3. use cat \u003c\u003c \u0027EOF\u0027\n\nv1\u003d\"line 3\"\nv\u003d$(\n\tcat \u003c\u003cEOF\nline 1\nline 2\n$v1\nEOF\n)\necho $v   # no newlines\necho \"$v\" #with newlines\n\nv\u003d$(\n\tcat \u003c\u003c\"EOF\"\nline 1\nline 2\n$v1\nEOF\n)\necho \"$v\"\n\nv\u003d$(\n\tcat \u003c\u003c\u0027EOF\u0027\nline 1\nline 2\n$v1\nEOF\n)\necho \"$v\""},{"cat":"bash","title":"test_commands.sh","content":"# test command or application available.\n# -v: command or application existance\n\nif command -v git \u003e/dev/null 2\u003e\u00261; then\n\techo \"git command exist\"\nfi\n"}]}