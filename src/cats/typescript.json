{"data":[{"cat":"typescript","title":"class-interface.ts","content":"\n// ### what class and interfacde like\n// using Ctrl-z to revert to previous contents.\n// class:\n// 1. class is a blueprint of an object\n// 2. class is a type\n// 3. class is a function\n// 4. class is an object\n\nclass Person {\n\tname: string;\n\tage: number;\n\tconstructor(name: string, age: number) {\n\t\tthis.name \u003d name;\n\t\tthis.age \u003d age;\n\t}\n}\n\n// interface \n// 1. interface is a type\n// 2. interface is an object\n// 3. interface is a function\n// 4. interface is a class\n\ninterface IPerson {\n\tname: string;\n\tage: number;\n}\n\n// class inheritance\nclass Employee extends Person {\n\tdepartment: string;\n\tconstructor(name: string, age: number, department: string) {\n\t\tsuper(name, age);\n\t\tthis.department \u003d department;\n\t}\n}\n// implment interface\nclass Employee1 implements IPerson {\n\tname: string;\n\tage: number;\n\tdepartment: string;\n\tconstructor(name: string, age: number, department: string) {\n\t\tthis.name \u003d name;\n\t\tthis.age \u003d age;\n\t\tthis.department \u003d department;\n\t}\n}\n\n// multiple inheritances\nclass Employee2 extends Person implements IPerson {\n\tdepartment: string;\n\tconstructor(name: string, age: number, department: string) {\n\t\tsuper(name, age);\n\t\tthis.department \u003d department;\n\t}\n}\n\n// generic\nclass Employee3\u003cT\u003e extends Person implements IPerson {\n\tdepartment: T;\n\tconstructor(name: string, age: number, department: T) {\n\t\tsuper(name, age);\n\t\tthis.department \u003d department;\n\t}\n}"},{"cat":"typescript","title":"parameters.ts","content":"\n// ### function parameters\n// using Ctrl-z to revert to previous contents.\n\n// optional parameters\nfunction optionalParameters(a: number, b?: number) {\n\tconsole.log(a, b);\n}\n\n// default value \nfunction defaultParameters(a: number, b \u003d 10) {\n\tconsole.log(a, b);\n}\n\n// varargs\nfunction varargs(...args: number[]) {\n\tconsole.log(args);\n}\n\n// rest parameters\nfunction restParameters(a: number, b: number, ...args: number[]) {\n\tconsole.log(a, b, args);\n}\n\n// destruction of parameters\nfunction destructionParameters({ a, b }: { a: number, b: number }) {\n\tconsole.log(a, b);\n}\n\n// how to call destructionParameters\ndestructionParameters({ a: 1, b: 2 });\n\n// destruction of parameters with default value\nfunction destructionParameters1({ a, b \u003d 10 }: { a: number, b?: number }) {\n\tconsole.log(a, b);\n}"},{"cat":"typescript","title":"url-process.ts","content":"\n// ### URL process\n// using Ctrl-z to revert to previous contents.\n\n// get the current original URL\nlet url \u003d window.location.href;\n\n// get the url without the query part.\nconst urlWithoutQuery \u003d url.split(\u0027?\u0027)[0];\n\n// use url objec to get the url without the query part.\nconst urlWithoutQuery1 \u003d new URL(url).origin + new URL(url).pathname;\n\n// get the query parameters as js object.\nconst query \u003d url.split(\u0027?\u0027)[1].split(\u0027\u0026\u0027).reduce((acc, cur) \u003d\u003e {\n\tconst [key, value] \u003d cur.split(\u0027\u003d\u0027);\n\tacc[key] \u003d value;\n\treturn acc;\n}, {});\n\n// get the query parameters as js object using URLSearchParams\nurl \u003d \"https://www.google.com/search?q\u003djavascript+url+query+parameters\u0026oq\u003djavascript+url+query+parameters\u0026aqs\u003dchrome..69i57j0l7.10560j0j7\u0026sourceid\u003dchrome\u0026ie\u003dUTF-8\";\nconst query1 \u003d new URLSearchParams(url).entries();\n\nconst p1 \u003d new URLSearchParams(window.location.search).get(\u0027page\u0027);\nconst p2 \u003d new URLSearchParams(window.location.search).get(\u0027size\u0027);\n\n// iterate over query1\nfor (const [key, value] of query1) {\n\tconsole.log(`${key}: ${value}`);\n}\n\n// append query parameters to url by using URLSearchParams\nconst params \u003d new URLSearchParams();\nparams.append(\u0027page\u0027, \u00271\u0027);\nparams.append(\u0027size\u0027, \u002710\u0027);\nconst urlWithQuery \u003d urlWithoutQuery + \u0027?\u0027 + params.toString();\n\n// reload the page with changed query or the same url.\nwindow.location.href \u003d urlWithQuery;\n"},{"cat":"typescript","title":"literal.ts","content":"\n// ### typescript literal types example\n// using Ctrl-z to revert to previous contents.\n\nlet aliteral \u003d {\n\t\u0027a\u0027: 0\n}\n\n// show wrong\n// aliteral \u003d {\n// \t\u0027b\u0027: 1\n// }\n\n// right way\n\nlet aliteral1: { [key: string]: any } \u003d {\n\t\u0027a\u0027: 1\n}"}]}